#pragma kernel CSMain

#define raymarchingNumThreadsX 16
#define raymarchingNumThreadsY 8
#define raymarchingNumThreadsZ 1
#define raymarchingThreadCount raymarchingNumThreadsX * raymarchingNumThreadsY * raymarchingNumThreadsZ

#include "ImplicitBasics.cginc"         //Contains the basics like primitives or operations.
#include "StructDefinitions.cginc"      //Contains definitons of structs.     
#include "WorldLogic.cginc"             //Contains the map of the world and related stuff unique to the world.

/*
 * Variables set from CPU side, like uniforms
 */
RWTexture2D<float4> SphereTracingTexture; //Target Render Texture with Read Write Access

float4 CameraFrustumEdgeVectors[4];
float4x4 CameraInverseViewMatrix;
float3 CameraPos;
float2 Resolution;

int SphereTracingSteps;


float3 CalculateNormal(in float3 pos)
{
	const float3 epsilon = float3(0.001, 0.0, 0.0);
	
	float gradientX = Map(pos + epsilon.xyy).x - Map(pos - epsilon.xyy).x;
	float gradientY = Map(pos + epsilon.yxy).x - Map(pos - epsilon.yxy).x;
	float gradientZ = Map(pos + epsilon.yyx).x - Map(pos - epsilon.yyy).x;
	
	float3 normal = float3(gradientX, gradientY, gradientZ);
	
	return normalize(normal);
}

/*
 *  RayMarch
 * 
 *  Performs Sphere Tracing along given Ray
 *      x: Total trace distance travelled along Ray (t * rayDir)
 *      y: Material ID of hit object (-1 if nothing hit)
 */
float2 RayMarch(in Ray r)
{
	const float TRACE_DISTANCE_MAX = 1000.0;
	const float HIT_DISTANCE_MIN = 0.00015;

    
	float2 res = float2(1.0, -1.0); // result

    //Trace along ray with sphere tracing algorithm. 
	for(int i = 0; i < SphereTracingSteps; i++)
	{
	    float3 pointOnRay = r.Origin + res.x * r.Direction;
		float2 hit = Map(pointOnRay);
		res.x += hit.x;
		
		if (hit.x < HIT_DISTANCE_MIN) 
		{
		    res.y = hit.y;
		    break;
		}
		
		if (res.x > TRACE_DISTANCE_MAX)
		{
		    res.y = -1.0;
		    break;
		}
	}
	
	return res;
}

/*
 *  Main Function
 */
[numthreads(raymarchingNumThreadsX, raymarchingNumThreadsY, raymarchingNumThreadsZ)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	//UVs on Screen
	float2 uv = float2((id.x + 0.5) / Resolution.x, (id.y + 0.5) / Resolution.y);

	//Construct Ray
	Ray r;
	r.Origin = CameraPos;
	float4 rayDir = normalize(lerp(
	    lerp(CameraFrustumEdgeVectors[3], CameraFrustumEdgeVectors[2], uv.x),
	    lerp(CameraFrustumEdgeVectors[0], CameraFrustumEdgeVectors[1], uv.x),
	    uv.y));
	r.Direction = mul(CameraInverseViewMatrix, rayDir).xyz;
	
	float3 color = Background(r); //Evaluate Background
	float3 normal = float3(.0, .0, .0);
	
	float2 tm = RayMarch(r); //t: traceDistance, m: materialID
	float t = tm.x;
	float matID = tm.y;
	if (matID > 0.5)
	{
	    float3 pos = r.Origin + t * r.Direction;
	    normal = CalculateNormal(pos);
	    Material mat;
	    
	    EvaluateMaterial(matID, r, pos, normal, mat);
	    
	    color = Shading(t, r, pos, mat);
	} else 
	{
        //No material ID, we hit the background.
	}
	
	//Write Color to Texture
	SphereTracingTexture[uint2(id.xy)] = float4(color, 1.0);
}

