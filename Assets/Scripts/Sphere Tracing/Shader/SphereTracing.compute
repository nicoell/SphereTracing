#pragma kernel CSMainHigh
#pragma kernel CSMainMid
#pragma kernel CSMainLow

#define CSMainHighThreadsX 32
#define CSMainHighThreadsY 20
#define CSMainHighThreadsZ 1

#define CSMainMidThreadsX 16
#define CSMainMidThreadsY 16
#define CSMainMidThreadsZ 1

#define CSMainLowThreadsX 8
#define CSMainLowThreadsY 8
#define CSMainLowThreadsZ 1


#include "ImplicitBasics.cginc"         //Contains the basics like primitives or operations.
#include "StructDefinitions.cginc"      //Contains definitons of structs.     
#include "WorldLogic.cginc"             //Contains the map of the world and related stuff unique to the world.

/*
 * Variables set from CPU side, like uniforms
 */
RWTexture2D<float4> SphereTracingTexture;   //Target Render Texture with Read Write Access


float4 CameraFrustumEdgeVectors[4];         //Array of the cameras frustum edge vectors, clockwise beginning in the topleft.
float4x4 CameraInverseViewMatrix;       
float3 CameraPos;   
float2 Resolution;                          //Width and Height of RenderTexture
float2 ClippingPlanes;                      //x: Near        y: Far
float4 Time;                                //x: Time in s   y: x/20     z: deltaTime      w: 1/z

int SphereTracingSteps;
bool EnableSuperSampling;

float3 CalculateNormal(in float3 pos)
{
	const float3 epsilon = float3(0.001, 0.0, 0.0);
	
	float gradientX = Map(pos + epsilon.xyy).x - Map(pos - epsilon.xyy).x;
	float gradientY = Map(pos + epsilon.yxy).x - Map(pos - epsilon.yxy).x;
	float gradientZ = Map(pos + epsilon.yyx).x - Map(pos - epsilon.yyy).x;
	
	float3 normal = float3(gradientX, gradientY, gradientZ);
	
	return normalize(normal);
}

/*
 *  RayMarch
 * 
 *  Performs Sphere Tracing along given Ray
 *      x: Total trace distance travelled along Ray (t * rayDir)
 *      y: Material ID of hit object (-1 if nothing hit)
 */
void RayMarch(in Ray r, out Hit hit)
{
	hit.TraceDistance = ClippingPlanes.x; //Start tracing at Near Plane
	hit.MaterialId = -1; //No material is represented by material <= 0
	hit.DistanceToWorld = ClippingPlanes.y;

    //Trace along ray with sphere tracing algorithm. 
	for(int i = 0; i < SphereTracingSteps; i++)
	{
		float epsilon = 0.00015 * hit.TraceDistance;
		float3 pointOnRay = r.Origin + hit.TraceDistance * r.Direction;
		float2 map = Map(pointOnRay);
		
		//If we hit something or exceed the maximum trace distance we stop immediately.
		if (map.x < epsilon || hit.TraceDistance > ClippingPlanes.y) break;
		
		hit.TraceDistance += map.x;
		hit.MaterialId = map.y;
		hit.Position = pointOnRay;
		hit.DistanceToWorld = map.x;
	}
	
	if (hit.TraceDistance > ClippingPlanes.y)  hit.MaterialId = -1.0;
}

void Main(uint3 id)
{
    //UVs on Screen
	float2 uv = float2((id.x + 0.5) / Resolution.x, (id.y + 0.5) / Resolution.y);

    //Create Ray struct
    Ray r;
    r.Origin = CameraPos;
    float4 rayDir = (lerp(
        lerp(CameraFrustumEdgeVectors[3], CameraFrustumEdgeVectors[2], uv.x),
        lerp(CameraFrustumEdgeVectors[0], CameraFrustumEdgeVectors[1], uv.x),
        uv.y));
    r.Direction = mul(CameraInverseViewMatrix, rayDir).xyz;
	
    float3 color = float3(.0, .0, .0);
    
    Hit hit;
    RayMarch(r, hit);

    if (hit.MaterialId > 0.5)
    {
        float3 normal = CalculateNormal(hit.Position);
        Material mat;
        EvaluateMaterial(hit, r, normal, mat);
    
        color = Shading(hit, r, mat);
    } else 
    {
        color = Background(r);
    }

	SphereTracingTexture[uint2(id.xy)] = float4(color, 1.0);    //Write Color to Texture
}

void MainSuperSampling(uint3 id)
{
    //UVs on Screen
	float2 uv = float2((id.x + 0.5) / Resolution.x, (id.y + 0.5) / Resolution.y);

    //Construct Jitter Matrix for MultiSampling
    float eps = 2.;
    float epsX = Resolution.x*eps;
    float epsY = Resolution.y*eps;
    float4x2 jitterMatrix = float4x2(-1.0/epsX,  2.0/epsY,
                                      2.0/epsX,  1.0/epsY,
                                     -2.0/epsX, -1.0/epsY,
                                      1.0/epsX, -2.0/epsY);

    //Variable for final color 
    float3 colorSum = float3(0.0, 0.0, 0.0);

    //Create Ray struct
    Ray r;
    r.Origin = CameraPos;
    
    //Multisampling-Loop            
    for(int sample = 0; sample < 4; sample++)
    {
        //Construct Ray Direction
        float jx = uv.x + jitterMatrix[sample][0];
        float jy = uv.y + jitterMatrix[sample][1];
	    float4 rayDir = (lerp(
	        lerp(CameraFrustumEdgeVectors[3], CameraFrustumEdgeVectors[2], jx),
	        lerp(CameraFrustumEdgeVectors[0], CameraFrustumEdgeVectors[1], jx),
	        jy));
	    r.Direction = mul(CameraInverseViewMatrix, rayDir).xyz;
	
	    float3 color = float3(.0, .0, .0);
	    
	    Hit hit;
	    RayMarch(r, hit);

	    if (hit.MaterialId > 0.5)
	    {
	        float3 normal = CalculateNormal(hit.Position);
	        Material mat;
	        EvaluateMaterial(hit, r, normal, mat);
	    
	        color = Shading(hit, r, mat);
	    } else 
	    {
            color = Background(r);
	    }
        colorSum += color;
	}
	
    colorSum /= 4.0;
	SphereTracingTexture[uint2(id.xy)] = float4(colorSum, 1.0); //Write Color to Texture
}


[numthreads(CSMainHighThreadsX, CSMainHighThreadsY, CSMainHighThreadsZ)]
void CSMainHigh (uint3 id : SV_DispatchThreadID) { if (EnableSuperSampling) { MainSuperSampling(id); } else { Main(id); } }

[numthreads(CSMainMidThreadsX, CSMainMidThreadsY, CSMainMidThreadsZ)]
void CSMainMid (uint3 id : SV_DispatchThreadID) { if (EnableSuperSampling) { MainSuperSampling(id); } else { Main(id); } }

[numthreads(CSMainLowThreadsX, CSMainLowThreadsY, CSMainLowThreadsZ)]
void CSMainLow (uint3 id : SV_DispatchThreadID) { if (EnableSuperSampling) { MainSuperSampling(id); } else { Main(id); } }

