#pragma kernel CSMainHigh   DEFERRED_FINALIZE
#pragma kernel CSMainMid    DEFERRED_FINALIZE
#pragma kernel CSMainLow    DEFERRED_FINALIZE

#define CSMainHighThreadsX 32
#define CSMainHighThreadsY 20
#define CSMainHighThreadsZ 1

#define CSMainMidThreadsX 16
#define CSMainMidThreadsY 16
#define CSMainMidThreadsZ 1

#define CSMainLowThreadsX 8
#define CSMainLowThreadsY 8
#define CSMainLowThreadsZ 1

#include "Inputs/DeferredFinalizeInputs.cginc"
#include "Inputs/DeferredRenderingInputs.cginc"
#include "Inputs/SharedInputs.cginc"
#include "Defines/Structs.cginc"

#include "DeferredLogic.cginc"

float3 Background(in Ray r);

float3 Shading(SurfaceData surface, AmbientOcclusion ao, float depth, bool enableAo)
{
    float3 color = float3(.0, .0, .0);
    float3 ambientColor = float3(.1, .1, .1);
	float3 diffuseColor = float3(.0, .0, .0);
	float3 specularColor = float3(.0, .0, .0);
	
	float3 bentNormal = enableAo ? ao.BentNormal : surface.Normal;
	float specularOcclusion = enableAo ? ao.SpecularOcclusion : 1;
	float diffuseOcclusion = enableAo ? pow(length(bentNormal), OcclusionExponent) : 1;
	
	int matId = (int) surface.MaterialId;
	
	if (sign(matId) >= 0){
        StMaterial mat = MaterialBuffer[matId];
        
        if (enableAo && EnableGlobalIllumination){
            Ray aoRay;
            aoRay.Origin = float3(0,0,0);
            aoRay.Direction = bentNormal;
            ambientColor = diffuseOcclusion * Background(aoRay);
        }
        
        for(int i = 0; i < LightCount; i++)
        {
            StLight light = LightBuffer[i];
            if (light.LightType < 0) break;
            
            //Compute BlinnPhong Lightning
            float3 lightDir;
            float3 lightColor;
            float3 lightPower;
            float attenuation = 1.0;
    
            if (light.LightType == 0)               // Point Light
            {
                lightDir = light.LightData2.xyz - surface.Position;
                lightPower = light.LightData.w;
                attenuation = lightPower / length(lightDir);
                lightDir = normalize(lightDir);
                lightColor = light.LightData.xyz;
            } else if (light.LightType == 1)        // Directional Light
            {
                lightDir = light.LightData2.xyz;
                lightColor = light.LightData.xyz;
                lightPower = light.LightData.w;
            }
            
            float lambertian = max(dot(surface.Normal, lightDir), 0.0);
            float specular = 0.0;
            
            //if (lambertian > 0) {
                float3 halfDir = normalize(lightDir + (-CameraDir));
                float specularAngle = max(dot(surface.Normal, halfDir), 0.0);
                specular = pow(specularAngle, mat.Shininess);
            //} 
            
            diffuseColor += mat.DiffuseColor * lambertian * lightColor * attenuation;
            specularColor += mat.SpecularColor * specular * lightColor * attenuation;
        }
        
        diffuseColor *= diffuseOcclusion;
        specularColor *= specularOcclusion;
        
        //Add up color
        color = ambientColor + diffuseColor + specularColor;
	} else {
	    Ray r;
	    r.Origin = float3(0,0,0);
	    r.Direction = surface.Normal;
	    color = Background(r);
	    
	}
	//Gamma correct colors
 
	return float3(surface.Alpha * color);
}

void Main(uint3 id)
{
    float2 uv = float2((id.x + 0.5) / Resolution.x, (id.y + 0.5) / Resolution.y);
    
    StUnion stUnion;
    DecodeSurfaceData(SurfaceDataDeferred, id.xy, 0, stUnion.Surface, stUnion.Represent);
    DecodeAmbientOcclusion(AmbientOcclusionDeferred, id.xy, 0, stUnion.SurfaceAo, stUnion.RepresentAo);
    DecodeDepth(DepthDeferred, id.xy, 0, stUnion.SurfaceDepth, stUnion.RepresentDepth);
    
    float3 surfaceColor = Shading(stUnion.Surface, stUnion.SurfaceAo, stUnion.SurfaceDepth, EnableAmbientOcclusion);
    float3 representColor = Shading(stUnion.Represent, stUnion.RepresentAo, stUnion.RepresentDepth, EnableAmbientOcclusion);
    
    float3 outputColor = surfaceColor + representColor;
    outputColor = pow( max(outputColor,0.0), GammaCorrection);
    
    if (RenderOutput == 0) DeferredOutput[uint2(id.xy)] = float4(outputColor, 1);
    else if (RenderOutput == 1) DeferredOutput[uint2(id.xy)] = float4(surfaceColor, 1);
    else if (RenderOutput == 2) DeferredOutput[uint2(id.xy)] = float4(representColor, 1);
    
    else if (RenderOutput == 3) DeferredOutput[uint2(id.xy)] = float4(stUnion.Surface.Position / ClippingPlanes.y, 1);
    else if (RenderOutput == 4) DeferredOutput[uint2(id.xy)] = float4((float3) stUnion.Surface.MaterialId / MaterialCount, 1);
    else if (RenderOutput == 5) DeferredOutput[uint2(id.xy)] = float4(stUnion.Surface.Normal, 1);
    else if (RenderOutput == 6) DeferredOutput[uint2(id.xy)] = float4((float3) stUnion.Surface.Alpha, 1);
    else if (RenderOutput == 7) DeferredOutput[uint2(id.xy)] = float4(stUnion.SurfaceAo.BentNormal, 1);
    else if (RenderOutput == 8) DeferredOutput[uint2(id.xy)] = float4((float3) stUnion.SurfaceAo.SpecularOcclusion, 1);
    else if (RenderOutput == 9) DeferredOutput[uint2(id.xy)] = float4((float3) stUnion.SurfaceDepth / ClippingPlanes.y, 1);
    
    else if (RenderOutput == 10) DeferredOutput[uint2(id.xy)] = float4(stUnion.Represent.Position / ClippingPlanes.y, 1);
    else if (RenderOutput == 11) DeferredOutput[uint2(id.xy)] = float4((float3) stUnion.Represent.MaterialId / MaterialCount, 1);
    else if (RenderOutput == 12) DeferredOutput[uint2(id.xy)] = float4(stUnion.Represent.Normal, 1);
    else if (RenderOutput == 13) DeferredOutput[uint2(id.xy)] = float4((float3) stUnion.Represent.Alpha, 1);
    else if (RenderOutput == 14) DeferredOutput[uint2(id.xy)] = float4(stUnion.RepresentAo.BentNormal, 1);
    else if (RenderOutput == 15) DeferredOutput[uint2(id.xy)] = float4((float3) stUnion.RepresentAo.SpecularOcclusion, 1);
    else if (RenderOutput == 16) DeferredOutput[uint2(id.xy)] = float4((float3) stUnion.RepresentDepth/ ClippingPlanes.y, 1);
    
    //DeferredOutput[uint2(id.xy)] = float4(surfaceColor.rgb, 1);
    
    //DeferredOutput[uint2(id.xy)] = float4(stUnion.Surface.Normal + stUnion.Represent.Alpha * stUnion.Represent.Normal, 1);

}

[numthreads(CSMainHighThreadsX, CSMainHighThreadsY, CSMainHighThreadsZ)]
void CSMainHigh (uint3 id : SV_DispatchThreadID) { Main(id); }

[numthreads(CSMainMidThreadsX, CSMainMidThreadsY, CSMainMidThreadsZ)]
void CSMainMid (uint3 id : SV_DispatchThreadID) { Main(id); }

[numthreads(CSMainLowThreadsX, CSMainLowThreadsY, CSMainLowThreadsZ)]
void CSMainLow (uint3 id : SV_DispatchThreadID) {  Main(id); }


/*
 *  BACKGROUND
 * 
 *  Background/Sky related functions from here on. Need more comments
 */
float3 totalMie(in float T)
{
	float3 MieConst = float3(1.8399918514433978E14, 2.7798023919660528E14, 4.0790479543861094E14 );
	float c = (0.2*T) * 10E-18;
	return 0.434 * c * MieConst;
}

float sunIntensity(in float zenithAngleCos )
{   
	float e = 2.71828182845904523536028747135266249775724709369995957;
	float EE = 1000.0;
	float cutoffAngle = 1.6110731556870734;
	float steepness = 1.5;
	zenithAngleCos = clamp( zenithAngleCos, -1.0, 1.0 );
	return EE * max( 0.0, 1.0 - pow( e, -( ( cutoffAngle - acos( zenithAngleCos)) / steepness ) ) );
}

float hgPhase(in float cosTheta,in float g)
{
	float ONE_OVER_FOURPI = 0.07957747154594767;
	float g2 = pow( g, 2.0);
	float inverse = 1.0 / pow( 1.0 - 2.0 * g * cosTheta + g2, 1.5);
	return ONE_OVER_FOURPI * ( ( 1.0 - g2 ) * inverse );
}

float rayleighPhase(in float cosTheta ) 
{
	float THREE_OVER_SIXTEENPI = 0.05968310365946075;
	return THREE_OVER_SIXTEENPI * ( 1.0 + pow( cosTheta, 2.0 ) );
}

float3 Uncharted2Tonemap(in float3 x)
{
	float A = 0.15;
	float B = 0.50;
	float C = 0.10;
	float D = 0.20;
	float E = 0.02;
	float F = 0.30;
	return ( ( x * ( A * x + C * B ) + D * E ) / ( x * ( A * x + B ) + D * F ) ) - E / F;
}

float3 Background(in Ray r)
{       
	
	float3 sunPosition = float3( 4000.0, 150.0, 7000.0 );
	float3 vSunDirection = normalize( sunPosition );

	float3 up = float3(0.0, 1.0, 0.0);

	float vSunE = sunIntensity( dot( vSunDirection, up ));
	float vSunfade = 1.0 - clamp( 1.0 - exp((sunPosition.y / 450000.0 )), 0.0, 1.0);

	float rayleigh = 2.0;
	float3 totalRayleigh = float3( 5.804542996261093E-6, 1.3562911419845635E-5, 3.0265902468824876E-5 );
	float rayleighCoefficient = rayleigh - (1.0 * (1.0 - vSunfade ));
	float3 vBetaR = totalRayleigh * rayleighCoefficient;

	float turbidity = 10.0;
	float mieCoefficient = 0.005;
	float vBetaM = totalMie( turbidity ) * mieCoefficient;

	float pi = 3.141592653589793238462643383279502884197169;
	float rayleighZenithLength = 8.4E3;
	float mieZenithLength = 1.25E3;
	float zenithAngle = acos(max(0.0, dot( up, normalize(r.Direction) ) ) );
	float inverse = 1.0 / ( cos( zenithAngle ) + 0.15 * pow( 93.885 - ( ( zenithAngle * 180.0 ) / pi ), -1.253) );
	float sR = rayleighZenithLength * inverse;
	float sM = mieZenithLength * inverse;

	float3 Fex = exp( -( vBetaR * sR + vBetaM * sM) );

	float cosTheta = dot( normalize(r.Direction), vSunDirection );
	float rPhase = rayleighPhase( cosTheta * 0.5 + 0.5);
	float3 betaRTheta = vBetaR * rPhase;

	float mieDirectionalG = 0.8;
	float mPhase = hgPhase( cosTheta, mieDirectionalG);
	float3 betaMTheta = vBetaM * mPhase;

	float3 Lin = pow( vSunE * ( ( betaRTheta + betaMTheta ) / ( vBetaR + vBetaM ) ) * ( 1.0 - Fex ), float3( 1.5 , 1.5, 1.5) );
	Lin *= lerp( float3( 1.0,1.0,1.0 ), pow( vSunE * ( ( betaRTheta + betaMTheta ) / ( vBetaR + vBetaM ) ) * Fex, float3( 1.0 / 2.0, 1.0 / 2.0, 1.0 / 2.0 ) ), clamp( pow( 1.0 - dot( up, vSunDirection ), 5.0 ), 0.0, 1.0 ) );

	float theta = acos(r.Direction.y);
	float phi = atan2(r.Direction.z, r.Direction.x);
	float2 uv = float2(phi, theta);
	float3 L0 = float3(0.1,0.1,0.1) * Fex;

	float sunAngularDiameterCos = 0.999956676946448443553574619906976478926848692873900859324;
	float sundisk = smoothstep( sunAngularDiameterCos, sunAngularDiameterCos + 0.00002, cosTheta);
	L0 += ( vSunE * 19000.0 * Fex) * sundisk;

	float luminance = 1.0;
	float whiteScale = 1.0748724675633854;
	float3 texColor = (Lin + L0) * 0.04 + float3(0.0, 0.0003, 0.00075);
	float3 curr = Uncharted2Tonemap( ( log2( 2.0 / pow( luminance, 4.0 ) ) ) * texColor );
	float3 color = curr * whiteScale;

	float retc =  1.0 / ( 1.2 + ( 1.2 * vSunfade ) );
	float3 retColor = pow( color, float3(retc, retc, retc));

	//return r.Direction;
	return retColor;
}
