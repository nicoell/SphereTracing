#pragma kernel AOHorizontalH    ST_R    AO_R    HIGH
#pragma kernel AOHorizontalM    ST_R    AO_R    MID
#pragma kernel AOHorizontalL    ST_R    AO_R    LOW
#pragma kernel AOVerticalH      ST_R    AO_R    HIGH
#pragma kernel AOVerticalM      ST_R    AO_R    MID
#pragma kernel AOVerticalL      ST_R    AO_R    LOW

#include "Defines/HighMidLowThreads.cginc"
#include "Defines/Structs.cginc"

#include "Inputs/SharedInputs.cginc"
#include "Inputs/TextureAccessAwareInputs.cginc"

#include "Utils/StructSampleFuncs.cginc"
#include "Utils/StructWriteFuncs.cginc"

/*
 * PseudoSeparable CrossBilateralFilter with efficient GPU linear sampling 
 * http://rastergrid.com/blog/2010/09/efficient-gaussian-blur-with-linear-sampling/
 */

//Filter kernelsize to each side of pixel. Total kernelsize is 2*FilterSize + 1
//#define DiscreteFilterSize 4
#define FilterSize 2
float RangeSigma;
RWTexture2DArray<float4> AmbientOcclusionTarget;

void Main(uint3 id, float2 direction)
{
    float2 uv = float2((id.x + 0.5) / AoResolution.x, (id.y + 0.5) / AoResolution.y);
    float2 uvstep = float2(1.0 / AoResolution.x, 1.0 / AoResolution.y) * direction;
    
    // Gaussian Kernel with sigma = 2
    //const float discreteOffsets[5] = {0.0, 1.0, 2.0, 3.0, 4.0};
    //const float discreteWeights[5] = {0.20236, 0.179044, 0.124009, 0.067234, 0.028532};
    //float2 uvOffsets[5] = {discreteOffsets[0] * uvstep, discreteOffsets[1] * uvstep, discreteOffsets[2] * uvstep,
    //    discreteOffsets[3] * uvstep, discreteOffsets[4] * uvstep};
    // See conversion from discete to linear:
    // http://rastergrid.com/blog/2010/09/efficient-gaussian-blur-with-linear-sampling/
    const float linearOffsets[3] = {0.0,     1.4092,   3.29793};
    const float linearWeights[3] = {0.20236, 0.303053, 0.095766};
    float2 uvOffsets[3] = {float2(0, 0), linearOffsets[1] * uvstep, linearOffsets[2] * uvstep};
    
    float centerTraceDistance = SampleTraceDistance(sampler_point_clamp, uv, id.z, 0.0);
    AmbientOcclusion fAo = SampleAmbientOcclusion(sampler_point_clamp, uv, id.z, 0.0);
    fAo.BentNormal *= linearWeights[0];
    
    fAo.SpecularOcclusion *= linearWeights[0];
    float weight = linearWeights[0];
    [unroll]
    for (int i = 1; i < FilterSize; i++) {
        [unroll]
        for(int sign = -1; sign <= 1; sign += 2){
            float traceDistance = SampleTraceDistance(sampler_point_clamp, uv + sign * uvOffsets[i], id.z, 0.0);
            AmbientOcclusion ao = SampleAmbientOcclusion(sampler_point_clamp, uv + sign * uvOffsets[i], id.z, 0.0);
            
            float delta = centerTraceDistance - traceDistance; //TraceDistance Delta
            float range = exp((-1.0 * delta * delta) / (2.0 * RangeSigma * RangeSigma));
            
            float rangeweight = linearWeights[i] * range;
            
            fAo.BentNormal += ao.BentNormal * rangeweight;
            fAo.SpecularOcclusion += ao.SpecularOcclusion * rangeweight;
            
            weight += rangeweight;
        }
    }
    
    fAo.BentNormal /= weight;
    fAo.SpecularOcclusion /= weight;
    
    AmbientOcclusionTarget[id] = float4(fAo.BentNormal, fAo.SpecularOcclusion);
}

[numthreads(ThreadsX, ThreadsY, ThreadsZ)]
void AOHorizontalH ( uint3 id : SV_DispatchThreadID) { Main(id, float2(1, 0)); }
[numthreads(ThreadsX, ThreadsY, ThreadsZ)]
void AOHorizontalM ( uint3 id : SV_DispatchThreadID) { Main(id, float2(1, 0)); }
[numthreads(ThreadsX, ThreadsY, ThreadsZ)]
void AOHorizontalL ( uint3 id : SV_DispatchThreadID) { Main(id, float2(1, 0)); }
[numthreads(ThreadsX, ThreadsY, ThreadsZ)]
void AOVerticalH ( uint3 id : SV_DispatchThreadID) { Main(id, float2(0, 1)); }
[numthreads(ThreadsX, ThreadsY, ThreadsZ)]
void AOVerticalM ( uint3 id : SV_DispatchThreadID) { Main(id, float2(0, 1)); }
[numthreads(ThreadsX, ThreadsY, ThreadsZ)]
void AOVerticalL ( uint3 id : SV_DispatchThreadID) { Main(id, float2(0, 1)); }