#pragma kernel DeferredH DEF_RW ST_R AO_R HIGH
#pragma kernel DeferredM DEF_RW ST_R AO_R MID
#pragma kernel DeferredL DEF_RW ST_R AO_R LOW

#include "Defines/HighMidLowThreads.cginc"
#include "Defines/SharedConstants.cginc"
#include "Defines/Structs.cginc"

#include "Inputs/DeferredShadingInputs.cginc"
#include "Inputs/SharedInputs.cginc"
#include "Inputs/TextureAccessAwareInputs.cginc"

#include "Utils/StructLoadFuncs.cginc"
#include "Utils/StructSampleFuncs.cginc"
#include "Utils/StructWriteFuncs.cginc"

#include "WorldLogic.cginc"

float3 Background(in Ray r);

TextureCubeArray<float4> ConvolutedEnvironmentMap;
SamplerState sampler_ConvolutedEnvironmentMap;

TextureCube<float4> EnvironmentMap;
SamplerState sampler_EnvironmentMap;

Texture2DArray<float4> FakeCubemapRenderTexture;
SamplerState sampler_FakeCubemapRenderTexture;

int ConvolutionLayerCount;

float ShadowSoft(float3 ro, SphereTracingData surface, int k, float bias)
{
    float res = 1.0;
    float ph = 1e20;
    float3 dest = surface.Position+bias*surface.Normal;
    float3 rd = -normalize(ro-dest);
    float mint = 0;
    float maxt = length(dest-ro); 
    for( float t=mint; t < maxt; )
    {
        float3 pos = ro + rd*t;
        float h = Map(pos).x;
        if( h < .0015 ){
                return 0.0;
        }
        float y = h*h/(2*ph);
        float d = sqrt(h*h-y*y);
        res = min(res, k*d/max(0.0,t-y));
        ph = h;  
        t += h;
        
    }
    return res;
}

float ShadowSoft2(float3 lightPos, SphereTracingData surface, int k, float bias)
{
    float res = 1.0;
    float ph = 1e10;
    float3 ro = surface.Position + surface.Normal * bias;
    float3 rd = normalize(lightPos-surface.Position);
    float t = bias;
    float maxt = length(lightPos-surface.Position); 
    for (int i = 0; i < 64; i++) 
    {
        float3 pos = ro + rd*t;
        float h = Map(pos).x;

        float y = (i == 0) ? 0.0 : h*h/(2*ph);
        float d = sqrt(h*h-y*y);
        res = min(res, k*d/max(0.0,t-y));
        ph = h;  
        t += h;
        if (res < 0.001 || t > maxt) break;
    }
    return saturate(res);
}

float3 Shading(SphereTracingData surface, AmbientOcclusion ao, inout float3 skyColor)
{
    float3 color = float3(.0, .0, .0);
        
    float3 ambientColor = float3(.1, .1, .1);
    float3 skyRadiance = float3(.0, .0, .0);
	float3 diffuseColor = float3(.0, .0, .0);
	float3 specularColor = float3(.0, .0, .0);
	
	float3 bentNormal = EnableAmbientOcclusion ? surface.Normal + ao.BentNormal : surface.Normal;
	float specularOcclusion = EnableAmbientOcclusion ? ao.SpecularOcclusion : 1;
	float diffuseOcclusion = EnableAmbientOcclusion ? pow(length(bentNormal), OcclusionExponent) : 1;
	
	int matId = (int) surface.MaterialId;
	
	if (sign(matId) >= 0){
        StMaterial mat = MaterialBuffer[matId];
        for(int i = 0; i < LightCount; i++)
        {
            StLight light = LightBuffer[i];
            if (light.LightType < 0) break;
            
            //Compute BlinnPhong Lightning
            float3 lightDir;
            float3 lightDirNormalized;
            float3 lightColor;
            float lightPower;
            float attenuation = 1.0;
            float lightOcclusion = 1.0;
            float shadow = 1.0;
            
            if (light.LightType == 0)               // Point Light
            {
                lightDir = light.LightData2.xyz - surface.Position;
                lightDirNormalized = normalize(lightDir);
                lightColor = light.LightData.xyz;
                lightPower = light.LightData.w;
                attenuation = lightPower / length(lightDir);
                
                //shadow = ShadowSoft(light.LightData2.xyz, surface, 24, .2);
                //shadow = ShadowSoft2(light.LightData2.xyz, surface, 10, .1);

            } else if (light.LightType == 1)        // Directional Light
            {
                lightDir = light.LightData2.xyz;
                lightDirNormalized = normalize(lightDir);
                lightColor = light.LightData.xyz;
                lightPower = light.LightData.w;
                //attenuation = 1.0; No attenuation for directional light
                //NOTE: Low performance on Directional Light for Shadows
                float3 fakeLightPos = lightDirNormalized*20;
                //float3 fakeLightDir = normalize(fakeLightPos - surface.Position);
                //shadow = ShadowSoft2(fakeLightPos, surface, 10, .2);
                
            }
            
            float NdotL = saturate(dot(lightDirNormalized, surface.Normal));
            float bentNdotL = saturate(dot(lightDirNormalized, bentNormal));
            lightOcclusion = 1.0 - saturate(sqrt(saturate(NdotL - bentNdotL)));
            
            float lambertian = max(dot(surface.Normal, lightDir), 0.0);
            
            float specular = 0.0;
            float3 halfDir = normalize(lightDir + (-CameraDir));
            float specularAngle = max(dot(surface.Normal, halfDir), 0.0);
            specular = pow(specularAngle, mat.Shininess);

            diffuseColor += mat.DiffuseColor * lambertian * lightColor * attenuation * diffuseOcclusion * shadow;
            specularColor += mat.SpecularColor * specular * lightColor * attenuation * specularOcclusion * shadow;
        }
        
        if (EnableAmbientOcclusion && EnableGlobalIllumination){
            //TODO: This is not how it works actually, need to review with physically based lightning
            Ray aoRay;
            aoRay.Origin = float3(0,0,0);
            aoRay.Direction = bentNormal;
            if (EnableCubemap){
                float coneAngle = saturate(length(bentNormal) * 2 - 1.0);
                float cubemapArrayIndex = coneAngle * (ConvolutionLayerCount - 1);
                float3 direction = normalize(bentNormal);
                float tap0Index = floor(cubemapArrayIndex);
                float tap1Index = min(ceil(cubemapArrayIndex), ConvolutionLayerCount - 1);
                float4 skyColorTap0 = ConvolutedEnvironmentMap.SampleLevel(sampler_ConvolutedEnvironmentMap, float4(direction, tap0Index), 0.0);
                float4 skyColorTap1 = ConvolutedEnvironmentMap.SampleLevel(sampler_ConvolutedEnvironmentMap, float4(direction, tap1Index), 0.0);
                
                skyRadiance = lerp(skyColorTap0.xyz, skyColorTap1.xyz, frac(cubemapArrayIndex));
                skyRadiance *= dot(bentNormal, surface.Normal);
                //ambientColor = FakeCubemapRenderTexture.SampleLevel(sampler_FakeCubemapRenderTexture, aoRay.Direction, 0).xyz;
                
                ambientColor += mat.DiffuseColor * skyRadiance * diffuseOcclusion;
                //diffuseColor *= skyRadiance * diffuseOcclusion;
                //ambientColor = diffuseOcclusion * Cubemap.SampleLevel(sampler_Cubemap, aoRay.Direction, (1 - diffuseOcclusion) * CubemapMaxMip).xyz;
            } else {
                ambientColor = specularOcclusion * diffuseOcclusion * Background(aoRay);
            }
        }
        
        //diffuseColor *= diffuseOcclusion;
        //specularColor *= specularOcclusion;
        
        //Add up color
        color = ambientColor + diffuseColor + specularColor;
	} else {
	    Ray r;
	    r.Origin = float3(0,0,0);
	    r.Direction = surface.RayDirection;
	    if (EnableCubemap){
	        //skyColor += FakeCubemapRenderTexture.SampleLevel(sampler_FakeCubemapRenderTexture, r.Direction, 0).xyz;
	        //skyColor += EnvironmentMap.SampleLevel(sampler_EnvironmentMap, r.Direction, 0).xyz;
	        skyColor += ConvolutedEnvironmentMap.SampleLevel(sampler_ConvolutedEnvironmentMap, float4(r.Direction, OcclusionExponent * (ConvolutionLayerCount - 1.0)), 0.0);
	    } else {
	        //Use prodecural sky generation if cubemap is not enabled. Expensive!
	        skyColor += Background(r) * surface.Alpha ;
	    }
	    
	}
	//Gamma correct colors
 
	return float3(color);
}

void Main(uint3 id)
{
    float2 uv = float2((id.x + 0.5) / Resolution.x, (id.y + 0.5) / Resolution.y);
    
    float3 surfaceSkyColor = (float3) 0;
    float3 representSkyColor = (float3) 0;
    
    //surface Shading
    SphereTracingData surface = LoadSphereTracingData(id.xy, 0);
	SphereTracingData represent = LoadSphereTracingData(id.xy, 1);
	AmbientOcclusion surfaceAo;
    AmbientOcclusion representAo;

	
	float debugTraceDistance = SampleTraceDistance(sampler_point_clamp, uv, 0, 0.0);
	
    float3 surfaceColor = (float3) 0;
    //Only do shading if Alpha is greater than some epsilon
    if ((surface.Alpha) > ALPHAEPSILON) {
        if (EnableAmbientOcclusion) surfaceAo = LoadAmbientOcclusion(id.xy, 0);
        surfaceColor = Shading(surface, surfaceAo, surfaceSkyColor);
    }
    
    //represent Shading
    float3 representColor = (float3) 0;
    //Only do shading if Alpha is greater than some epsilon
    if (represent.Alpha > ALPHAEPSILON) {
        if (EnableAmbientOcclusion) representAo = LoadAmbientOcclusion(id.xy, 1);
        representColor = Shading(represent, representAo, representSkyColor);
    }
    
    float3 outputColor = (surface.Alpha - represent.Alpha) * surfaceColor + represent.Alpha * representColor;
    outputColor = pow( max(outputColor,0.0), GammaCorrection);
    outputColor += (surface.Alpha - represent.Alpha) * surfaceSkyColor + represent.Alpha * representSkyColor; //Exclude sky from gamma correction
    
    //Clear DeferredOutputTexture if this is the first pass.
    if (IsFirstPass) DeferredOutputTexture[uint2(id.xy)] = ClearColor;
    
    //Add Color on DeferredOutputTexture
    if (RenderOutput == 0) DeferredOutputTexture[uint2(id.xy)] =      DeferredOutputTexture[uint2(id.xy)] + float4(outputColor, 1);
    
    //Or draw some debug Outputs
    //TODO: Probably need to rethink which of these values should be summed up in debug view and which not.
    else if (RenderOutput == 1) DeferredOutputTexture[uint2(id.xy)] = DeferredOutputTexture[uint2(id.xy)] + float4(surfaceColor, 1);
    else if (RenderOutput == 2) DeferredOutputTexture[uint2(id.xy)] = DeferredOutputTexture[uint2(id.xy)] + float4(representColor, 1);
   
    else if (RenderOutput == 3) DeferredOutputTexture[uint2(id.xy)] = float4(surface.Position / ClippingPlanes.y, 1);
    else if (RenderOutput == 4) DeferredOutputTexture[uint2(id.xy)] = float4((float3) surface.MaterialId / MaterialCount, 1);
    else if (RenderOutput == 5) DeferredOutputTexture[uint2(id.xy)] = ConvolutedEnvironmentMap.SampleLevel(sampler_ConvolutedEnvironmentMap, float4(surface.RayDirection, OcclusionExponent * (ConvolutionLayerCount - 1.0)), 0.0);//float4(surface.RayDirection, 1);
    else if (RenderOutput == 6) DeferredOutputTexture[uint2(id.xy)] = DeferredOutputTexture[uint2(id.xy)] + float4((float3) surface.TraceDistance / ClippingPlanes.y, 1);
    else if (RenderOutput == 7) DeferredOutputTexture[uint2(id.xy)] = float4(surface.Normal, 1);
    else if (RenderOutput == 8) DeferredOutputTexture[uint2(id.xy)] = float4((float3) (surface.Alpha - represent.Alpha), 1);
    else if (RenderOutput == 9) DeferredOutputTexture[uint2(id.xy)] = DeferredOutputTexture[uint2(id.xy)] + float4(surfaceAo.BentNormal + surface.Normal, 1);
    else if (RenderOutput == 10) DeferredOutputTexture[uint2(id.xy)] = DeferredOutputTexture[uint2(id.xy)] + float4((float3) length(surfaceAo.BentNormal  + surface.Normal), 1);
    else if (RenderOutput == 11) DeferredOutputTexture[uint2(id.xy)] = DeferredOutputTexture[uint2(id.xy)] + float4((float3) surfaceAo.SpecularOcclusion, 1);
    
    else if (RenderOutput == 12) DeferredOutputTexture[uint2(id.xy)] = float4(represent.Position / ClippingPlanes.y, 1);
    else if (RenderOutput == 13) DeferredOutputTexture[uint2(id.xy)] = float4((float3) represent.MaterialId / MaterialCount, 1);
    else if (RenderOutput == 14) DeferredOutputTexture[uint2(id.xy)] = float4(represent.RayDirection, 1);
    else if (RenderOutput == 15) DeferredOutputTexture[uint2(id.xy)] = DeferredOutputTexture[uint2(id.xy)] + float4((float3) represent.TraceDistance/ ClippingPlanes.y, 1);
    else if (RenderOutput == 16) DeferredOutputTexture[uint2(id.xy)] = float4(represent.Normal, 1);
    else if (RenderOutput == 17) DeferredOutputTexture[uint2(id.xy)] = float4((float3) represent.Alpha, 1);
    else if (RenderOutput == 18) DeferredOutputTexture[uint2(id.xy)] = DeferredOutputTexture[uint2(id.xy)] + float4(representAo.BentNormal + represent.Normal, 1);
    else if (RenderOutput == 19) DeferredOutputTexture[uint2(id.xy)] = DeferredOutputTexture[uint2(id.xy)] + float4((float3) length(representAo.BentNormal + represent.Normal), 1);
    else if (RenderOutput == 20) DeferredOutputTexture[uint2(id.xy)] = DeferredOutputTexture[uint2(id.xy)] + float4((float3) representAo.SpecularOcclusion, 1);
    else if (RenderOutput == 21) DeferredOutputTexture[uint2(id.xy)] = DeferredOutputTexture[uint2(id.xy)] + float4((float3) debugTraceDistance / ClippingPlanes.y, 1);
    
}

[numthreads(ThreadsX, ThreadsY, ThreadsZ)]
void DeferredH (uint3 id : SV_DispatchThreadID) { Main(id); }

[numthreads(ThreadsX, ThreadsY, ThreadsZ)]
void DeferredM (uint3 id : SV_DispatchThreadID) { Main(id); }

[numthreads(ThreadsX, ThreadsY, ThreadsZ)]
void DeferredL (uint3 id : SV_DispatchThreadID) { Main(id); }


/*
 *  BACKGROUND
 * 
 *  Background/Sky related functions from here on. Need more comments
 */
float3 totalMie(in float T)
{
	float3 MieConst = float3(1.8399918514433978E14, 2.7798023919660528E14, 4.0790479543861094E14 );
	float c = (0.2*T) * 10E-18;
	return 0.434 * c * MieConst;
}

float sunIntensity(in float zenithAngleCos )
{   
	float e = 2.71828182845904523536028747135266249775724709369995957;
	float EE = 1000.0;
	float cutoffAngle = 1.6110731556870734;
	float steepness = 1.5;
	zenithAngleCos = clamp( zenithAngleCos, -1.0, 1.0 );
	return EE * max( 0.0, 1.0 - pow( e, -( ( cutoffAngle - acos( zenithAngleCos)) / steepness ) ) );
}

float hgPhase(in float cosTheta,in float g)
{
	float ONE_OVER_FOURPI = 0.07957747154594767;
	float g2 = pow( g, 2.0);
	float inverse = 1.0 / pow( 1.0 - 2.0 * g * cosTheta + g2, 1.5);
	return ONE_OVER_FOURPI * ( ( 1.0 - g2 ) * inverse );
}

float rayleighPhase(in float cosTheta ) 
{
	float THREE_OVER_SIXTEENPI = 0.05968310365946075;
	return THREE_OVER_SIXTEENPI * ( 1.0 + pow( cosTheta, 2.0 ) );
}

float3 Uncharted2Tonemap(in float3 x)
{
	float A = 0.15;
	float B = 0.50;
	float C = 0.10;
	float D = 0.20;
	float E = 0.02;
	float F = 0.30;
	return ( ( x * ( A * x + C * B ) + D * E ) / ( x * ( A * x + B ) + D * F ) ) - E / F;
}

float3 Background(in Ray r)
{       
	
	float3 sunPosition = float3( 4000.0, 150.0, 7000.0 );
	float3 vSunDirection = normalize( sunPosition );

	float3 up = float3(0.0, 1.0, 0.0);

	float vSunE = sunIntensity( dot( vSunDirection, up ));
	float vSunfade = 1.0 - clamp( 1.0 - exp((sunPosition.y / 450000.0 )), 0.0, 1.0);

	float rayleigh = 2.0;
	float3 totalRayleigh = float3( 5.804542996261093E-6, 1.3562911419845635E-5, 3.0265902468824876E-5 );
	float rayleighCoefficient = rayleigh - (1.0 * (1.0 - vSunfade ));
	float3 vBetaR = totalRayleigh * rayleighCoefficient;

	float turbidity = 10.0;
	float mieCoefficient = 0.005;
	float vBetaM = totalMie( turbidity ) * mieCoefficient;

	float pi = 3.141592653589793238462643383279502884197169;
	float rayleighZenithLength = 8.4E3;
	float mieZenithLength = 1.25E3;
	float zenithAngle = acos(max(0.0, dot( up, normalize(r.Direction) ) ) );
	float inverse = 1.0 / ( cos( zenithAngle ) + 0.15 * pow( 93.885 - ( ( zenithAngle * 180.0 ) / pi ), -1.253) );
	float sR = rayleighZenithLength * inverse;
	float sM = mieZenithLength * inverse;

	float3 Fex = exp( -( vBetaR * sR + vBetaM * sM) );

	float cosTheta = dot( normalize(r.Direction), vSunDirection );
	float rPhase = rayleighPhase( cosTheta * 0.5 + 0.5);
	float3 betaRTheta = vBetaR * rPhase;

	float mieDirectionalG = 0.8;
	float mPhase = hgPhase( cosTheta, mieDirectionalG);
	float3 betaMTheta = vBetaM * mPhase;

	float3 Lin = pow( vSunE * ( ( betaRTheta + betaMTheta ) / ( vBetaR + vBetaM ) ) * ( 1.0 - Fex ), float3( 1.5 , 1.5, 1.5) );
	Lin *= lerp( float3( 1.0,1.0,1.0 ), pow( vSunE * ( ( betaRTheta + betaMTheta ) / ( vBetaR + vBetaM ) ) * Fex, float3( 1.0 / 2.0, 1.0 / 2.0, 1.0 / 2.0 ) ), clamp( pow( 1.0 - dot( up, vSunDirection ), 5.0 ), 0.0, 1.0 ) );

	float theta = acos(r.Direction.y);
	float phi = atan2(r.Direction.z, r.Direction.x);
	float2 uv = float2(phi, theta);
	float3 L0 = float3(0.1,0.1,0.1) * Fex;

	float sunAngularDiameterCos = 0.999956676946448443553574619906976478926848692873900859324;
	float sundisk = smoothstep( sunAngularDiameterCos, sunAngularDiameterCos + 0.00002, cosTheta);
	L0 += ( vSunE * 19000.0 * Fex) * sundisk;

	float luminance = 1.0;
	float whiteScale = 1.0748724675633854;
	float3 texColor = (Lin + L0) * 0.04 + float3(0.0, 0.0003, 0.00075);
	float3 curr = Uncharted2Tonemap( ( log2( 2.0 / pow( luminance, 4.0 ) ) ) * texColor );
	float3 color = curr * whiteScale;

	float retc =  1.0 / ( 1.2 + ( 1.2 * vSunfade ) );
	float3 retColor = pow( color, float3(retc, retc, retc));

	//return r.Direction;
	return retColor;
}
