#pragma kernel CSMainHigh
#pragma kernel CSMainMid
#pragma kernel CSMainLow

#define CSMainHighThreadsX 32
#define CSMainHighThreadsY 20
#define CSMainHighThreadsZ 1

#define CSMainMidThreadsX 16
#define CSMainMidThreadsY 16
#define CSMainMidThreadsZ 1

#define CSMainLowThreadsX 8
#define CSMainLowThreadsY 8
#define CSMainLowThreadsZ 1


#include "UniformVariables.cginc"       //Contains the resources set from CPU.
#include "ImplicitBasics.cginc"         //Contains the basics like primitives or operations.
#include "StructDefinitions.cginc"      //Contains definitons of structs.     
#include "WorldLogic.cginc"             //Contains the map of the world and related stuff unique to the world.



float3 CalculateNormal(in float3 pos)
{
	const float3 epsilon = float3(0.001, 0.0, 0.0);
	
	float gradientX = Map(pos + epsilon.xyy).x - Map(pos - epsilon.xyy).x;
	float gradientY = Map(pos + epsilon.yxy).x - Map(pos - epsilon.yxy).x;
	float gradientZ = Map(pos + epsilon.yyx).x - Map(pos - epsilon.yyy).x;
	
	float3 normal = float3(gradientX, gradientY, gradientZ);
	
	return normalize(normal);
}

/*
 *  RayMarch
 * 
 *  Performs Sphere Tracing along given Ray
 *      x: Total trace distance travelled along Ray (t * rayDir)
 *      y: Material ID of hit object (-1 if nothing hit)
 */
void RayMarch(in Ray r, out Hit hit)
{
	hit.TraceDistance = ClippingPlanes.x; //Start tracing at Near Plane
	hit.MaterialId = -1; //No material is represented by material <= 0
	hit.DistanceToWorld = ClippingPlanes.y;

    //Trace along ray with sphere tracing algorithm. 
	for(int i = 0; i < SphereTracingSteps; i++)
	{
		float epsilon = 0.00015 * hit.TraceDistance;
		float3 pointOnRay = r.Origin + hit.TraceDistance * r.Direction;
		float2 map = Map(pointOnRay);
		
		//If we hit something or exceed the maximum trace distance we stop immediately.
		if (map.x < epsilon || hit.TraceDistance > ClippingPlanes.y) break;
		
		hit.TraceDistance += map.x;
		hit.MaterialId = map.y;
		hit.Position = pointOnRay;
		hit.DistanceToWorld = map.x;
	}
	
	if (hit.TraceDistance > ClippingPlanes.y)  hit.MaterialId = -1.0;
}

void Main(uint3 id)
{
    //UVs on Screen
    float2 uv = float2((id.x + 0.5) / Resolution.x, (id.y + 0.5) / Resolution.y);

    //Set Sampling Variables
    int sampleSize = EnableSuperSampling ? 4 : 1;

    //Construct Jitter Matrix for MultiSampling
    float eps = 2.;
    float epsX = Resolution.x*eps;
    float epsY = Resolution.y*eps;
    float4x2 jitterMatrix = float4x2(-1.0/epsX,  2.0/epsY,
                                      2.0/epsX,  1.0/epsY,
                                     -2.0/epsX, -1.0/epsY,
                                      1.0/epsX, -2.0/epsY);

    //Variable for final color 
    float3 colorSum = float3(0.0, 0.0, 0.0);

    //Create Ray struct
    Ray r;
    r.Origin = CameraPos;

    //Sampling-Loop            
    for(int sample = 0; sample < sampleSize; sample++)
    {
        //Construct Ray Direction
        float jx = EnableSuperSampling ? uv.x + jitterMatrix[sample][0]: uv.x;
        float jy = EnableSuperSampling ? uv.y + jitterMatrix[sample][1]: uv.y;

	    float4 rayDir = (lerp(
	        lerp(CameraFrustumEdgeVectors[3], CameraFrustumEdgeVectors[2], jx),
	        lerp(CameraFrustumEdgeVectors[0], CameraFrustumEdgeVectors[1], jx),
	        jy));
	    r.Direction = mul(CameraInverseViewMatrix, rayDir).xyz;
	
	    float3 color = float3(.0, .0, .0);
	    
	    Hit hit;
	    RayMarch(r, hit);

        //if Hit, calculate color 
	    if (hit.MaterialId > 0.5)
	    {
	        float3 normal = CalculateNormal(hit.Position);
	        Material mat;
	        EvaluateMaterial(hit, r, normal, mat);
	    
	        color = Shading(hit, r, mat);


            //One Time Reflective Calculation. Can be extended to n Reflective Passes....
            if(mat.Roughness < 1.0)
            {
                float3 colorReflective = float3(0.,0.,0.);
                Ray rReflective;
                Hit hitReflective;
                rReflective.Origin = hit.Position;
                float3 rayDir = r.Direction - 2 * dot(r.Direction, mat.Normal) * mat.Normal;
                rReflective.Direction = rayDir;
                RayMarch(rReflective, hitReflective);

                if (hitReflective.MaterialId > 0.5)
                {
                    float3 normalReflective = CalculateNormal(hitReflective.Position);
                     
                    Material matReflective;
                    EvaluateMaterial(hitReflective, rReflective, normalReflective, matReflective);
                    colorReflective = Shading(hitReflective, rReflective, matReflective);
                    color = lerp(color, colorReflective, 1.-mat.Roughness);

                } else 
                    {
                        colorReflective = Background(rReflective);
                    }
                 
            }
	    } else 
	    {
            color = Background(r);
	    }
        colorSum += color; //Sum up Color
	}
 
    colorSum /= sampleSize; //Calculate mean Color
	SphereTracingTexture[uint2(id.xy)] = float4(colorSum, 1.0); //Write Color to Texture
}


[numthreads(CSMainHighThreadsX, CSMainHighThreadsY, CSMainHighThreadsZ)]
void CSMainHigh (uint3 id : SV_DispatchThreadID) { Main(id); }

[numthreads(CSMainMidThreadsX, CSMainMidThreadsY, CSMainMidThreadsZ)]
void CSMainMid (uint3 id : SV_DispatchThreadID) { Main(id); }

[numthreads(CSMainLowThreadsX, CSMainLowThreadsY, CSMainLowThreadsZ)]
void CSMainLow (uint3 id : SV_DispatchThreadID) {  Main(id); }

