#pragma kernel SphereTracingFPassH  ST_RW    F_PASS   HIGH
#pragma kernel SphereTracingFPassM  ST_RW    F_PASS   MID
#pragma kernel SphereTracingFPassL  ST_RW    F_PASS   LOW

#pragma kernel SphereTracingKPassH  ST_RW    K_PASS   HIGH
#pragma kernel SphereTracingKPassM  ST_RW    K_PASS   MID
#pragma kernel SphereTracingKPassL  ST_RW    K_PASS   LOW

#include "Defines/HighMidLowThreads.cginc"
#include "Defines/SharedConstants.cginc"
#include "Defines/Structs.cginc"

#include "Inputs/SharedInputs.cginc"
#include "Inputs/SphereTracingInputs.cginc"
#include "Inputs/TextureAccessAwareInputs.cginc"

#include "Utils/ImplicitBasics.cginc" 
#include "Utils/StructLoadFuncs.cginc"
#include "Utils/StructWriteFuncs.cginc"

#include "WorldLogic.cginc"

float3 CalculateNormal(in float3 pos)
{
	const float3 epsilon = float3(0.01, 0.0, 0.0);
	
	float gradientX = Map(pos + epsilon.xyy).x - Map(pos - epsilon.xyy).x;
	float gradientY = Map(pos + epsilon.yxy).x - Map(pos - epsilon.yxy).x;
	float gradientZ = Map(pos + epsilon.yyx).x - Map(pos - epsilon.yyy).x;
	
	float3 normal = float3(gradientX, gradientY, gradientZ);
	
	return normalize(normal);
}

/*
 *  RayMarch
 * 
 *  Performs Sphere Tracing along given Ray
 *      x: Total trace distance travelled along Ray (t * rayDir)
 *      y: Material ID of hit object (-1 if nothing hit)
 */
void RayMarch(in Ray r, inout Hit surfaceHit, inout Hit representHit)
{
	//TODO: Don't use clippingplane as starting trace distance for reflections 
	surfaceHit.TraceDistance = ClippingPlanes.x;    //Start tracing at Near Plane
	surfaceHit.DistanceToWorld = ClippingPlanes.y;  
	surfaceHit.Alpha = 1;
	surfaceHit.MaterialId = -1; //No material is represented by material <= 0
	
	representHit.Position = float3(0,0,0);
    representHit.TraceDistance = ClippingPlanes.x; //Start tracing at Near Plane
	representHit.DistanceToWorld = 1000000;
	representHit.Alpha = 0;
	representHit.MaterialId = -1; //No material is represented by material <= 0
    
    //const float radiusP = 0.01; //radius of Pixel
    bool representFound = false;
    float t = ClippingPlanes.x;
    
    //float3 pointOnRay = r.Origin + t * r.Direction;
    float2 currentMap = Map(r.Origin + t * r.Direction); //start with negative distance and no material
    int i = 0;
    for(; i < SphereTracingSteps; i++)
	{   
	    float epsilon = 0.0015 * t;
	    //Test if we hit the surface
	    if (currentMap.x <= epsilon) {
	        //We hit the surface.
	        surfaceHit.DistanceToWorld = currentMap.x;
            surfaceHit.TraceDistance = t;
            surfaceHit.MaterialId = currentMap.y;
            surfaceHit.Position = r.Origin + surfaceHit.TraceDistance * r.Direction;
            break;
	    }
	    
	    //We didn't hit the surface yet so sample next sphere
	    float2 nextMap = Map(r.Origin + (t + currentMap.x) * r.Direction);

	    //Test if we are inside pixelRadius
	    if (currentMap.x < (t * RadiusPixel)) {
	        //We are inside the pixelRadius but we didn't hit a surface
	        //Test if the next sphere is bigger than the current one
	        if (nextMap.x > currentMap.x){
	            //Next sphere is bigger, meaning we move away from a surface
	            //Test if we have a represent by making sure it's the first time a sphere gets bigger next step
	            if (representFound == false){
	                //We found a represent
	                representFound = true;
	                //But we only want to save it, if it's the smallest represent in sphere radius
	                //and if we either did not found a represent yet or if we are still on same Material //this is Hacky and not garantued to produce nice results
	                if (currentMap.x < representHit.DistanceToWorld && (representHit.MaterialId == -1 || representHit.MaterialId == currentMap.y)){
	                    //We found a new smallest represent.
	                    representHit.DistanceToWorld = currentMap.x;
	                    representHit.TraceDistance = t;
	                    representHit.MaterialId = currentMap.y;
	                }
	            }
	        } else {
	            //Next sphere is not bigger, meaning we are getting closer to a surface
	            representFound = false;
	        }
	    }
	    
	    t += currentMap.x;
	    currentMap = nextMap;
	    
	    //Test if we exceeded far clippingplane
	    if (t > ClippingPlanes.y){
	        surfaceHit.TraceDistance = ClippingPlanes.y;
	        surfaceHit.MaterialId = -1;
	        break;
	    }
	}
	
	//Test if we found a represent by checking its MaterialId
	if (representHit.MaterialId >= 0) {
	    //Calculate how much the represent covers the pixel
	    representHit.Alpha = 1.0 - representHit.DistanceToWorld / (representHit.TraceDistance * RadiusPixel);
	    representHit.Position = r.Origin + representHit.TraceDistance * r.Direction;
	}
    
    //Test if we reached max SphereTracingSteps
    if (i == SphereTracingSteps) {
        //Use latest hit instead of background
        surfaceHit.TraceDistance = t;
		surfaceHit.MaterialId = currentMap.y;
		surfaceHit.DistanceToWorld = currentMap.x;
		surfaceHit.Position = r.Origin + surfaceHit.TraceDistance * r.Direction;
    }
}

void EvaluateHit(in uint2 xy, in Ray r, in Hit hit, inout SphereTracingData sd)
{
    sd.Position = hit.Position;
    sd.MaterialId = hit.MaterialId;
    sd.TraceDistance = hit.TraceDistance;
    if (sign(hit.MaterialId) >= 0)
    {
        sd.Normal = CalculateNormal(hit.Position);
        sd.RayDirection = r.Direction;
        sd.Alpha *= hit.Alpha;
    }
    //if the background is hit
    else
    {
        sd.Normal = (float3) 0;
        sd.RayDirection = r.Direction;
        sd.Alpha *= hit.Alpha;
    }
}

void Main(uint3 id)
{
    float2 uv = float2((id.x + 0.5) / Resolution.x, (id.y + 0.5) / Resolution.y);
    
    SphereTracingData surface;
    SphereTracingData represent;
    
    #ifdef F_PASS
        surface.Alpha = 1.0;
        represent.Alpha = 1.0;
        //Create Ray through current Pixel
        Ray r;
        r.uv = uv;
        r.Origin = CameraPos;
        float4 rayDir = (lerp(
            lerp(CameraFrustumEdgeVectors[3], CameraFrustumEdgeVectors[2], uv.x),
            lerp(CameraFrustumEdgeVectors[0], CameraFrustumEdgeVectors[1], uv.x),
            uv.y));
        r.Direction = (mul(CameraInverseViewMatrix, rayDir).xyz);
    #elif K_PASS
        //Read SphereTracingData from previuos pass
        surface = LoadSphereTracingData(id.xy, 0);
        represent = LoadSphereTracingData(id.xy, 1);
        //Do not calculate pass if neither surface nor represent alpha has an impact
        if (surface.Alpha <= ALPHAEPSILON && represent.Alpha <= ALPHAEPSILON) return;        
        
        /*
         * TODO: Handle transparent materials
         *          Somehow need to exlude the transparent object in signed distance field
         *          Maybe use ScreenSpace Reflections in this case and only follow transparent ray
         *          Or use the represent surface for transparency/reflection since it is only needed for edges
         */
        
        //Evaluate Material to calculate new Ray Direction
        StMaterial surfaceMat = MaterialBuffer[surface.MaterialId];
        StMaterial representMat = MaterialBuffer[represent.MaterialId];
        surface.Alpha *= surfaceMat.Metallic; //TODO: metallic ist not the correct reflective factor
        represent.Alpha *= representMat.Metallic;//TODO: metallic ist not the correct reflective factor
        
        if (sign(surface.MaterialId) < 0) surface.Alpha = 0;
        if (sign(represent.MaterialId) < 0) represent.Alpha = 0;
        //Test again if we need to calculate this pass
        if (surface.Alpha <= ALPHAEPSILON && represent.Alpha <= ALPHAEPSILON){
            //If not, we need to write the new alphas to texture before we stop
            WriteSphereTracingData(id.xy, 0, surface);
            WriteSphereTracingData(id.xy, 1, represent);
            return;
        }
        //We only follow one ray though, so we choose the one with greater visual impact
        Ray r;
        r.uv = uv;
        if (surface.Alpha >= represent.Alpha) {
            r.Origin = surface.Position;
            //normalize(dir - 2 * normalize( dot(dir, normal) * normal))  
            r.Direction = reflect(normalize(surface.RayDirection), surface.Normal);
            //r.Direction = reflect(normalize(surface.RayDirection), surface.Normal);
        } else {
            r.Origin = represent.Position;
            r.Direction = reflect(normalize(represent.RayDirection), represent.Normal);
            //r.Direction = reflect(normalize(represent.RayDirection), represent.Normal);
        }
    #endif

    Hit surfaceHit;
    Hit representHit;
    RayMarch(r, surfaceHit, representHit);
    EvaluateHit(id.xy, r, surfaceHit, surface);
    EvaluateHit(id.xy, r, representHit, represent);

    WriteSphereTracingData(id.xy, 0, surface);
    WriteSphereTracingData(id.xy, 1, represent);
}

[numthreads(ThreadsX, ThreadsY, ThreadsZ)]
void SphereTracingFPassH (uint3 id : SV_DispatchThreadID) { Main(id); }
[numthreads(ThreadsX, ThreadsY, ThreadsZ)]
void SphereTracingFPassM (uint3 id : SV_DispatchThreadID) { Main(id); }
[numthreads(ThreadsX, ThreadsY, ThreadsZ)]
void SphereTracingFPassL (uint3 id : SV_DispatchThreadID) { Main(id); }

[numthreads(ThreadsX, ThreadsY, ThreadsZ)]
void SphereTracingKPassH (uint3 id : SV_DispatchThreadID) { Main(id); }
[numthreads(ThreadsX, ThreadsY, ThreadsZ)]
void SphereTracingKPassM (uint3 id : SV_DispatchThreadID) { Main(id); }
[numthreads(ThreadsX, ThreadsY, ThreadsZ)]
void SphereTracingKPassL (uint3 id : SV_DispatchThreadID) { Main(id); }